<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
   
   
    <sub-flow name="CCAuthentication">
        
        <object-to-string-transformer doc:name="Object to String"/>    
        <set-variable variableName="originalPayload" value="#[payload]" doc:name="originalPayload var"/>
        
        <http:request config-ref="PaymentStore_HTTP_Request_Configuration" path="cc/authentication" method="POST" doc:name="PaymentStoreHTTP">
            <http:request-builder>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        
      
        <set-payload value="#[flowVars.originalPayload]" doc:name="Set Payload"/>
        <json:json-to-object-transformer returnClass="java.util.Map" mimeType="application/java" doc:name="JSON to Object"/>
      
         <set-variable variableName="originalPayload" value="#[payload]" doc:name="originalPayload var"/>

          <flow-ref name="SendCCAuthenticationRequest" doc:name="SendCCAuthenticationRequest"/> 
        <logger message="Cybersource authentication response: [#[message.payloadAs(java.lang.String)]]]" level="INFO" doc:name="Cybersource authentication response Logger"/> 
    </sub-flow>

	
	
    <sub-flow name="SendCCAuthenticationRequest">
        <set-variable variableName="queryParamForMerchantID" value="#[flowVars.originalPayload.merchant_details.merchant_id]" doc:name="queryParamForMerchantIDvar"/>
        <dw:transform-message metadata:id="eb6b9178-e12f-4be1-91c2-3e3d064c4e42" doc:name="Request">
            <dw:input-payload doc:sample="sample_data\RateRequest.xml"/>
            <dw:input-variable doc:sample="sample_data\string_2.dwl" variableName="originalPayload"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace tns urn:schemas-cybersource-com:transaction-data-1.139
%function isNotEmpty(element) element != null and element != ""
---
{
	tns#requestMessage: {	
		tns#merchantID: flowVars.originalPayload.merchant_details.merchant_id,
		tns#merchantReferenceCode: flowVars.originalPayload.merchant_details.merchantReferenceCode,	
		
		(tns#billTo: {
			tns#firstName:flowVars.originalPayload.bill_to.first_name,
			tns#lastName:flowVars.originalPayload.bill_to.last_name,
            tns#street1:flowVars.originalPayload.bill_to.street1,
            tns#city: flowVars.originalPayload.bill_to.city,
            tns#state: flowVars.originalPayload.bill_to.state,
            tns#postalCode: flowVars.originalPayload.bill_to.postalCode,
            tns#country: flowVars.originalPayload.bill_to.country,
            tns#email: flowVars.originalPayload.bill_to.email          
       }) when isNotEmpty(flowVars.originalPayload.bill_to),       
       
     			
		(tns#item  @(id: 1): {
				tns#unitPrice:flowVars.originalPayload.items.item.unit_price,
				tns#quantity:flowVars.originalPayload.items.item.quantity			
			 }) when isNotEmpty(flowVars.originalPayload.items.item)	,
			
       
        tns#purchaseTotals:{
            tns#currency:flowVars.originalPayload.purchase_totals.currency,
            (tns#grandTotalAmount:flowVars.originalPayload.purchase_totals.grandTotalAmount)
            when isNotEmpty(flowVars.originalPayload.purchase_totals.grandTotalAmount)
            
            
         },
         
         (tns#installment:{
            tns#totalCount:flowVars.originalPayload.installment.totalCount,
            tns#planType:flowVars.originalPayload.installment.planType
         }) when isNotEmpty(flowVars.originalPayload.installment),
         
         (tns#card:{
            tns#accountNumber:flowVars.originalPayload.card.account_number,
            tns#expirationMonth:flowVars.originalPayload.card.expiration_month,
            tns#expirationYear:flowVars.originalPayload.card.expiration_year
         }) when isNotEmpty(flowVars.originalPayload.card) ,
         
        
         (tns#ccAuthService @(run: true):"")  when isNotEmpty(flowVars.originalPayload.ccAuthService),         
         
         (
         	tns#ccCaptureService @(run: true):""
         ) when isNotEmpty(flowVars.originalPayload.ccCaptureService)
         
        
                 
	}
}]]></dw:set-payload>
        </dw:transform-message>


		<logger message="[SendCCAuthenticationRequest] [ &gt;&gt;&gt; SendCCAuthenticationRequest  [#[message.payloadAs(java.lang.String)]]]" level="INFO" doc:name="SendCCAuthenticationRequest Logger" />
        
         <until-successful maxRetries="3" millisBetweenRetries="30000" synchronous="true" doc:name="Until Successful">
        <ws:consumer config-ref="Web_Service_Consumer" operation="runTransaction" doc:name="CyberSourceWeb Service Consumer"/>
        </until-successful>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="response" value="#[message.payloadAs(java.lang.String)]" mimeType="text/xml" doc:name="ResponseVariable"/>
        
        
            <http:request config-ref="PaymentStore_HTTP_Request_Configuration" path="cc/response" method="POST" doc:name="PaymentStoreHTTP">
            <http:request-builder>
                <http:query-param paramName="merchantID" value="#[flowVars.queryParamForMerchantID]"/>
                <http:header headerName="Content-Type" value="application/xml"/>

            </http:request-builder>
        </http:request>
    
        <set-payload value="#[flowVars.response]" mimeType="application/xml" doc:name="Set Payload"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    
    </sub-flow>


</mule>
